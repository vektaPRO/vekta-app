//
//  KaspiOrdersIntegration.swift
//  vektaApp
//
//  –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Kaspi —Å —Å–∏—Å—Ç–µ–º–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ Vekta
//

import Foundation
import SwiftUI
import FirebaseFirestore
import FirebaseAuth

// MARK: - Kaspi Orders Manager

@MainActor
class KaspiOrdersManager: ObservableObject {
    
    @Published var kaspiOrders: [private let kaspiService = KaspiAPIService()KaspiOrder] = []
    @Published var deliveries: [DeliveryConfirmation] = []
    @Published var isLoading = false
    @Published var errorMessage: String?
    @Published var successMessage: String?
    
    private let kaspiService = KaspiAPIService()
    private let db = Firestore.firestore()
    private var ordersListener: ListenerRegistration?
    
    init() {
        setupOrdersListener()
    }
    
    deinit {
        ordersListener?.remove()
    }
    
    // MARK: - Setup
    
    private func setupOrdersListener() {
        // –°–ª—É—à–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –∏–∑ Kaspi
        Timer.scheduledTimer(withTimeInterval: 60, repeats: true) { _ in
            Task {
                await self.syncKaspiOrders()
            }
        }
    }
    
    // MARK: - Kaspi Orders Sync
    
    /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–∫–∞–∑—ã –∏–∑ Kaspi
    func syncKaspiOrders() async {
        isLoading = true
        errorMessage = nil
        
        do {
            let orders = try await kaspiService.loadOrders()
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
            let newOrders = orders.filter { kaspiOrder in
                !kaspiOrders.contains { $0.orderId == kaspiOrder.orderId }
            }
            
            if !newOrders.isEmpty {
                kaspiOrders.append(contentsOf: newOrders)
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –≤ Firestore
                try await saveKaspiOrdersToFirestore(newOrders)
                
                successMessage = "‚úÖ –ü–æ–ª—É—á–µ–Ω–æ \(newOrders.count) –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ Kaspi"
                
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
                for order in newOrders {
                    await createDeliveryFromKaspiOrder(order)
                }
            }
            
        } catch {
            errorMessage = "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤: \(error.localizedDescription)"
        }
        
        isLoading = false
    }
    
    /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑—ã Kaspi –≤ Firestore
    private func saveKaspiOrdersToFirestore(_ orders: [KaspiOrder]) async throws {
        guard let userId = Auth.auth().currentUser?.uid else { return }
        
        let batch = db.batch()
        
        for order in orders {
            let orderData: [String: Any] = [
                "kaspiOrderId": order.orderId,
                "orderNumber": order.orderNumber,
                "customerName": order.customerInfo.name,
                "customerPhone": order.customerInfo.phone,
                "customerEmail": order.customerInfo.email ?? "",
                "deliveryAddress": order.deliveryAddress,
                "totalAmount": order.totalAmount,
                "status": order.status,
                "items": order.items.map { item in
                    [
                        "productId": item.productId,
                        "productName": item.productName,
                        "quantity": item.quantity,
                        "price": item.price
                    ]
                },
                "createdAt": Timestamp(date: order.createdAt),
                "syncedAt": FieldValue.serverTimestamp(),
                "sellerId": userId
            ]
            
            let docRef = db.collection("kaspiOrders").document(order.orderId)
            batch.setData(orderData, forDocument: docRef)
        }
        
        try await batch.commit()
    }
    
    // MARK: - Delivery Management
    
    /// –°–æ–∑–¥–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –∏–∑ –∑–∞–∫–∞–∑–∞ Kaspi
    func createDeliveryFromKaspiOrder(_ kaspiOrder: KaspiOrder) async {
        do {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏ (—Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç –∏–ª–∏ –ø—Ä–æ–¥–∞–≤–µ—Ü)
            let deliveryMethod = determineDeliveryMethod(for: kaspiOrder)
            
            switch deliveryMethod {
            case .fulfillment:
                await createFulfillmentDelivery(kaspiOrder)
            case .seller:
                await createSellerDelivery(kaspiOrder)
            case .courier:
                await assignToCourier(kaspiOrder)
            }
            
        } catch {
            errorMessage = "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏: \(error.localizedDescription)"
        }
    }
    
    /// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Ç–æ–¥ –¥–æ—Å—Ç–∞–≤–∫–∏
    private func determineDeliveryMethod(for order: KaspiOrder) -> DeliveryMethod {
        // –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
        // –ü–æ–∫–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - —á–µ—Ä–µ–∑ –∫—É—Ä—å–µ—Ä–∞
        return .courier
    }
    
    /// –°–æ–∑–¥–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É —á–µ—Ä–µ–∑ —Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç
    private func createFulfillmentDelivery(_ kaspiOrder: KaspiOrder) async {
        // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç–∞
        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ —Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ \(kaspiOrder.orderNumber)")
    }
    
    /// –°–æ–∑–¥–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –ø—Ä–æ–¥–∞–≤—Ü–æ–º
    private func createSellerDelivery(_ kaspiOrder: KaspiOrder) async {
        // TODO: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
        print("üöö –ü—Ä–æ–¥–∞–≤–µ—Ü –¥–æ–ª–∂–µ–Ω –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ \(kaspiOrder.orderNumber)")
    }
    
    /// –ù–∞–∑–Ω–∞—á–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞
    private func assignToCourier(_ kaspiOrder: KaspiOrder) async {
        do {
            // –ù–∞—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
            guard let courier = await findAvailableCourier(for: kaspiOrder.deliveryAddress) else {
                throw DeliveryError.noCourierAvailable
            }
            
            // –°–æ–∑–¥–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É
            let delivery = try await kaspiService.createDeliveryFromKaspiOrder(
                kaspiOrder,
                courierId: courier.id,
                courierName: courier.name
            )
            
            deliveries.append(delivery)
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫—É—Ä—å–µ—Ä–∞
            await notifyCourier(courier, about: delivery)
            
            successMessage = "‚úÖ –ó–∞–∫–∞–∑ \(kaspiOrder.orderNumber) –Ω–∞–∑–Ω–∞—á–µ–Ω –∫—É—Ä—å–µ—Ä—É \(courier.name)"
            
        } catch {
            errorMessage = "–û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä–∞: \(error.localizedDescription)"
        }
    }
    
    /// –ù–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
    private func findAvailableCourier(for address: String) async -> CourierInfo? {
        // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π –∫—É—Ä—å–µ—Ä–æ–≤
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
        return CourierInfo(
            id: "courier_1",
            name: "–ò–≤–∞–Ω –ö—É—Ä—å–µ—Ä–æ–≤",
            phone: "+77771234567",
            isAvailable: true,
            location: "–ê–ª–º–∞—Ç—ã"
        )
    }
    
    /// –£–≤–µ–¥–æ–º–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞
    private func notifyCourier(_ courier: CourierInfo, about delivery: DeliveryConfirmation) async {
        let notification: [String: Any] = [
            "userId": courier.id,
            "type": "new_delivery",
            "title": "–ù–æ–≤–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞",
            "message": "–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –∑–∞–∫–∞–∑ \(delivery.trackingNumber)",
            "deliveryId": delivery.id,
            "createdAt": FieldValue.serverTimestamp(),
            "read": false
        ]
        
        do {
            try await db.collection("notifications").addDocument(data: notification)
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫—É—Ä—å–µ—Ä—É: \(error)")
        }
    }
    
    // MARK: - Status Updates
    
    /// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ Kaspi –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∞–≤–∫–∏
    func updateKaspiOrderStatus(_ orderId: String, status: String) async {
        // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Kaspi API –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
        print("üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ \(orderId) –≤ Kaspi: \(status)")
    }
    
    /// –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
    func loadDeliveries() async {
        guard let userId = Auth.auth().currentUser?.uid else { return }
        
        do {
            let snapshot = try await db.collection("deliveries")
                .whereField("courierId", isEqualTo: userId)
                .order(by: "createdAt", descending: true)
                .getDocuments()
            
            deliveries = snapshot.documents.compactMap { doc in
                DeliveryConfirmation.fromFirestore(doc.data(), id: doc.documentID)
            }
            
        } catch {
            errorMessage = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç–∞–≤–æ–∫: \(error.localizedDescription)"
        }
    }
}

// MARK: - Supporting Types

enum DeliveryMethod {
    case fulfillment    // –î–æ—Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ —Ñ—É–ª—Ñ–∏–ª–º–µ–Ω—Ç
    case seller        // –î–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–º
    case courier       // –î–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º
}

struct CourierInfo {
    let id: String
    let name: String
    let phone: String
    let isAvailable: Bool
    let location: String
}

enum DeliveryError: LocalizedError {
    case noCourierAvailable
    case invalidAddress
    case orderAlreadyProcessed
    
    var errorDescription: String? {
        switch self {
        case .noCourierAvailable:
            return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—É—Ä—å–µ—Ä–æ–≤"
        case .invalidAddress:
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏"
        case .orderAlreadyProcessed:
            return "–ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"
        }
    }
}

// MARK: - Kaspi Orders View

struct KaspiOrdersView: View {
    @StateObject private var ordersManager = KaspiOrdersManager()
    @Environment(\.dismiss) private var dismiss
    
    var body: some View {
        NavigationView {
            VStack(spacing: 0) {
                
                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                if !ordersManager.kaspiOrders.isEmpty {
                    ordersStatsView
                }
                
                // –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
                ordersListView
            }
            .navigationTitle("–ó–∞–∫–∞–∑—ã Kaspi")
            .navigationBarTitleDisplayMode(.large)
            .toolbar {
                ToolbarItem(placement: .navigationBarLeading) {
                    Button("–ó–∞–∫—Ä—ã—Ç—å") {
                        dismiss()
                    }
                }
                
                ToolbarItem(placement: .navigationBarTrailing) {
                    Button(action: {
                        Task {
                            await ordersManager.syncKaspiOrders()
                        }
                    }) {
                        Image(systemName: "arrow.triangle.2.circlepath")
                    }
                    .disabled(ordersManager.isLoading)
                }
            }
            .refreshable {
                await ordersManager.syncKaspiOrders()
            }
            .alert("–û—à–∏–±–∫–∞", isPresented: .constant(ordersManager.errorMessage != nil)) {
                Button("OK") {
                    ordersManager.errorMessage = nil
                }
            } message: {
                Text(ordersManager.errorMessage ?? "")
            }
            .alert("–£—Å–ø–µ—Ö", isPresented: .constant(ordersManager.successMessage != nil)) {
                Button("OK") {
                    ordersManager.successMessage = nil
                }
            } message: {
                Text(ordersManager.successMessage ?? "")
            }
        }
        .onAppear {
            Task {
                await ordersManager.syncKaspiOrders()
                await ordersManager.loadDeliveries()
            }
        }
    }
    
    // MARK: - View Components
    
    private var ordersStatsView: some View {
        HStack(spacing: 20) {
            StatCard(
                icon: "doc.text.fill",
                title: "–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤",
                value: "\(ordersManager.kaspiOrders.count)",
                color: .blue
            )
            
            StatCard(
                icon: "truck.box.fill",
                title: "–í –¥–æ—Å—Ç–∞–≤–∫–µ",
                value: "\(ordersManager.deliveries.filter { $0.status != .confirmed }.count)",
                color: .orange
            )
            
            StatCard(
                icon: "checkmark.circle.fill",
                title: "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ",
                value: "\(ordersManager.deliveries.filter { $0.status == .confirmed }.count)",
                color: .green
            )
        }
        .padding(.horizontal, 16)
        .padding(.vertical, 12)
        .background(Color(UIColor.systemGray6))
    }
    
    private var ordersListView: some View {
        Group {
            if ordersManager.isLoading {
                LoadingView("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–∞–∑–æ–≤...")
            } else if ordersManager.kaspiOrders.isEmpty {
                EmptyStateView(
                    icon: "doc.text",
                    title: "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤",
                    message: "–ó–∞–∫–∞–∑—ã –∏–∑ Kaspi –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
                    actionTitle: "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å",
                    action: {
                        Task {
                            await ordersManager.syncKaspiOrders()
                        }
                    }
                )
            } else {
                ScrollView {
                    LazyVStack(spacing: 12) {
                        ForEach(ordersManager.kaspiOrders, id: \.orderId) { order in
                            KaspiOrderCard(
                                order: order,
                                delivery: ordersManager.deliveries.first { $0.orderId == order.orderId }
                            )
                        }
                    }
                    .padding(.horizontal, 16)
                    .padding(.vertical, 12)
                }
            }
        }
    }
}

// MARK: - Kaspi Order Card

struct KaspiOrderCard: View {
    let order: KaspiOrder
    let delivery: DeliveryConfirmation?
    
    var body: some View {
        VStack(alignment: .leading, spacing: 12) {
            
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            HStack {
                VStack(alignment: .leading, spacing: 4) {
                    Text("–ó–∞–∫–∞–∑ #\(order.orderNumber)")
                        .font(.headline)
                    
                    Text(order.customerInfo.name)
                        .font(.subheadline)
                        .foregroundColor(.secondary)
                }
                
                Spacer()
                
                // –°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏
                if let delivery = delivery {
                    StatusBadge(status: delivery.status)
                } else {
                    StatusBadge(text: "–ù–æ–≤—ã–π", icon: "star.fill", color: .blue)
                }
            }
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
            VStack(alignment: .leading, spacing: 8) {
                InfoRow(
                    icon: "phone",
                    title: "–¢–µ–ª–µ—Ñ–æ–Ω:",
                    value: order.customerInfo.phone
                )
                
                InfoRow(
                    icon: "location",
                    title: "–ê–¥—Ä–µ—Å:",
                    value: order.deliveryAddress
                )
                
                InfoRow(
                    icon: "tenge.circle",
                    title: "–°—É–º–º–∞:",
                    value: String(format: "%.0f ‚Ç∏", order.totalAmount)
                )
                
                InfoRow(
                    icon: "calendar",
                    title: "–î–∞—Ç–∞:",
                    value: DateFormatter.shortDateTime.string(from: order.createdAt)
                )
            }
            
            // –¢–æ–≤–∞—Ä—ã
            if !order.items.isEmpty {
                VStack(alignment: .leading, spacing: 4) {
                    Text("–¢–æ–≤–∞—Ä—ã:")
                        .font(.caption)
                        .fontWeight(.medium)
                        .foregroundColor(.secondary)
                    
                    ForEach(Array(order.items.enumerated()), id: \.offset) { index, item in
                        HStack {
                            Text("‚Ä¢ \(item.productName)")
                                .font(.caption)
                            
                            Spacer()
                            
                            Text("\(item.quantity) —à—Ç")
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                    }
                }
                .padding(.top, 4)
            }
        }
        .padding(16)
        .background(Color(UIColor.systemBackground))
        .cornerRadius(12)
        .shadow(color: .black.opacity(0.05), radius: 4, x: 0, y: 2)
    }
}

#Preview {
    KaspiOrdersView()
}
