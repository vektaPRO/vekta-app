//
//  RetryManager.swift
//  vektaApp
//
//  –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
//

import Foundation

// MARK: - Retry Policy

struct RetryPolicy {
    let maxAttempts: Int
    let initialDelay: TimeInterval
    let maxDelay: TimeInterval
    let multiplier: Double
    let jitter: Bool
    
    static let `default` = RetryPolicy(
        maxAttempts: 3,
        initialDelay: 1.0,
        maxDelay: 60.0,
        multiplier: 2.0,
        jitter: true
    )
    
    static let aggressive = RetryPolicy(
        maxAttempts: 5,
        initialDelay: 0.5,
        maxDelay: 30.0,
        multiplier: 1.5,
        jitter: true
    )
    
    static let conservative = RetryPolicy(
        maxAttempts: 2,
        initialDelay: 2.0,
        maxDelay: 120.0,
        multiplier: 3.0,
        jitter: false
    )
}

// MARK: - Retry Manager

class RetryManager {
    
    static let shared = RetryManager()
    
    private init() {}
    
    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
    func perform<T>(
        operation: @escaping () async throws -> T,
        policy: RetryPolicy = .default,
        shouldRetry: ((Error, Int) -> Bool)? = nil
    ) async throws -> T {
        
        var lastError: Error?
        
        for attempt in 0..<policy.maxAttempts {
            do {
                // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
                return try await operation()
                
            } catch {
                lastError = error
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å
                let shouldRetryError = shouldRetry?(error, attempt) ?? shouldRetryDefault(error)
                
                if !shouldRetryError || attempt == policy.maxAttempts - 1 {
                    // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –∏–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                    throw error
                }
                
                // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
                let delay = calculateDelay(
                    attempt: attempt,
                    policy: policy
                )
                
                print("‚ö†Ô∏è Retry attempt \(attempt + 1)/\(policy.maxAttempts) after \(String(format: "%.2f", delay))s")
                
                // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                try await Task.sleep(nanoseconds: UInt64(delay * 1_000_000_000))
            }
        }
        
        // –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        throw lastError ?? NetworkError.unknown
    }
    
    /// –í—ã—á–∏—Å–ª–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
    private func calculateDelay(attempt: Int, policy: RetryPolicy) -> TimeInterval {
        // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
        var delay = policy.initialDelay * pow(policy.multiplier, Double(attempt))
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        delay = min(delay, policy.maxDelay)
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –¥–∂–∏—Ç—Ç–µ—Ä –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è "thundering herd"
        if policy.jitter {
            let jitterRange = delay * 0.2
            let jitter = Double.random(in: -jitterRange...jitterRange)
            delay += jitter
        }
        
        return max(0, delay)
    }
    
    /// –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    private func shouldRetryDefault(_ error: Error) -> Bool {
        if let networkError = error as? NetworkError {
            switch networkError {
            case .networkError, .serverError(let code, _) where code >= 500:
                return true
            case .rateLimited:
                return true
            case .invalidResponse:
                return false
            default:
                return false
            }
        }
        
        // NSURLError
        if let urlError = error as? URLError {
            switch urlError.code {
            case .timedOut, .cannotFindHost, .cannotConnectToHost,
                 .networkConnectionLost, .dnsLookupFailed:
                return true
            default:
                return false
            }
        }
        
        return false
    }
}

// MARK: - Circuit Breaker

/// Circuit Breaker –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∞–≤–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –æ—Ç–∫–∞–∑–æ–≤
class CircuitBreaker {
    
    enum State {
        case closed     // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
        case open       // –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        case halfOpen   // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    }
    
    private var state: State = .closed
    private var failureCount = 0
    private var lastFailureTime: Date?
    private var successCount = 0
    
    private let failureThreshold: Int
    private let successThreshold: Int
    private let timeout: TimeInterval
    
    init(
        failureThreshold: Int = 5,
        successThreshold: Int = 2,
        timeout: TimeInterval = 60.0
    ) {
        self.failureThreshold = failureThreshold
        self.successThreshold = successThreshold
        self.timeout = timeout
    }
    
    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ Circuit Breaker
    func execute<T>(_ operation: () async throws -> T) async throws -> T {
        switch state {
        case .open:
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ half-open
            if let lastFailure = lastFailureTime,
               Date().timeIntervalSince(lastFailure) > timeout {
                state = .halfOpen
                successCount = 0
                print("üîÑ Circuit Breaker: OPEN -> HALF-OPEN")
            } else {
                throw CircuitBreakerError.circuitOpen
            }
            
        case .halfOpen:
            // –í —Å–æ—Å—Ç–æ—è–Ω–∏–∏ half-open –ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é
            break
            
        case .closed:
            // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
            break
        }
        
        do {
            let result = try await operation()
            recordSuccess()
            return result
        } catch {
            recordFailure()
            throw error
        }
    }
    
    private func recordSuccess() {
        failureCount = 0
        
        switch state {
        case .halfOpen:
            successCount += 1
            if successCount >= successThreshold {
                state = .closed
                print("‚úÖ Circuit Breaker: HALF-OPEN -> CLOSED")
            }
        default:
            break
        }
    }
    
    private func recordFailure() {
        lastFailureTime = Date()
        
        switch state {
        case .closed:
            failureCount += 1
            if failureCount >= failureThreshold {
                state = .open
                print("‚ùå Circuit Breaker: CLOSED -> OPEN")
            }
            
        case .halfOpen:
            state = .open
            failureCount = 0
            print("‚ùå Circuit Breaker: HALF-OPEN -> OPEN")
            
        case .open:
            break
        }
    }
    
    /// –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ Circuit Breaker
    func reset() {
        state = .closed
        failureCount = 0
        successCount = 0
        lastFailureTime = nil
    }
}

// MARK: - Circuit Breaker Error

enum CircuitBreakerError: LocalizedError {
    case circuitOpen
    
    var errorDescription: String? {
        switch self {
        case .circuitOpen:
            return "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        }
    }
}

// MARK: - Network Error Extension

enum NetworkError: LocalizedError {
    case unknown
    
    var errorDescription: String? {
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞"
    }
}
