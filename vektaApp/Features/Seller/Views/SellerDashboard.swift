//
//  SellerDashboard.swift
//  vektaApp
//
//  –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≥–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å –ø—Ä–æ–¥–∞–≤—Ü–∞ —Å Kaspi –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π
//

import SwiftUI

struct SellerDashboard: View {
    
    @StateObject private var ordersViewModel = OrdersViewModel()
    @StateObject private var productsViewModel = ProductsViewModel()
    @StateObject private var kaspiOrdersManager = KaspiOrdersManager()
    
    @State private var showingOrders = false
    @State private var showingProducts = false
    @State private var showingCreateOrder = false
    @State private var showingKaspiToken = false
    @State private var showingKaspiOrders = false
    @State private var showingKaspiTest = false
    
    var body: some View {
        NavigationView {
            ScrollView {
                VStack(spacing: 24) {
                    
                    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                    headerSection
                    
                    // Kaspi —Å—Ç–∞—Ç—É—Å
                    kaspiStatusSection
                    
                    // –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
                    quickActionsSection
                    
                    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    statisticsSection
                    
                    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã Kaspi
                    recentKaspiOrdersSection
                    
                    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –Ω–∞ —Å–∫–ª–∞–¥
                    recentWarehouseOrdersSection
                    
                    Spacer(minLength: 100)
                }
                .padding(.horizontal, 20)
                .padding(.top, 20)
            }
            .navigationTitle("–ü—Ä–æ–¥–∞–≤–µ—Ü")
            .navigationBarTitleDisplayMode(.large)
            .toolbar {
                ToolbarItem(placement: .navigationBarTrailing) {
                    Menu {
                        Button(action: { showingKaspiToken = true }) {
                            Label("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Kaspi API", systemImage: "creditcard.circle")
                        }
                        
                        Button(action: { showingKaspiTest = true }) {
                            Label("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API", systemImage: "testtube.2")
                        }
                        
                        Divider()
                        
                        Button(action: {}) {
                            Label("–í—ã–π—Ç–∏", systemImage: "arrow.right.square")
                        }
                    } label: {
                        Image(systemName: "ellipsis.circle")
                    }
                }
            }
            .refreshable {
                await refreshAllData()
            }
        }
        .sheet(isPresented: $showingOrders) {
            OrdersListView()
        }
        .sheet(isPresented: $showingProducts) {
            ProductsView()
        }
        .sheet(isPresented: $showingCreateOrder) {
            CreateOrderView()
        }
        .sheet(isPresented: $showingKaspiToken) {
            KaspiAPITokenView()
        }
        .sheet(isPresented: $showingKaspiOrders) {
            KaspiOrdersView()
        }
        .sheet(isPresented: $showingKaspiTest) {
            KaspiAPITestView()
        }
        .onAppear {
            loadInitialData()
        }
    }
    
    // MARK: - Data Loading
    
    private func loadInitialData() {
        ordersViewModel.loadOrders()
        productsViewModel.loadProducts()
        
        Task {
            await kaspiOrdersManager.syncKaspiOrders()
            await kaspiOrdersManager.loadDeliveries()
        }
    }
    
    private func refreshAllData() async {
        ordersViewModel.refreshOrders()
        await productsViewModel.refreshProducts()
        await kaspiOrdersManager.syncKaspiOrders()
        await kaspiOrdersManager.loadDeliveries()
    }
}

// MARK: - View Components

extension SellerDashboard {
    
    // üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    private var headerSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!")
                .font(.title)
                .fontWeight(.bold)
            
            Text("–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–≤–∞—Ä–∞–º–∏ Kaspi –∏ –∑–∞–∫–∞–∑–∞–º–∏ –Ω–∞ —Å–∫–ª–∞–¥")
                .font(.subheadline)
                .foregroundColor(.secondary)
        }
        .frame(maxWidth: .infinity, alignment: .leading)
    }
    
    // üîó –°—Ç–∞—Ç—É—Å Kaspi –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    private var kaspiStatusSection: some View {
        VStack(alignment: .leading, spacing: 12) {
            Text("Kaspi Integration")
                .font(.headline)
                .fontWeight(.semibold)
            
            KaspiStatusCard(
                hasToken: productsViewModel.kaspiService.apiToken != nil,
                lastSync: productsViewModel.lastSyncDate,
                newOrders: kaspiOrdersManager.kaspiOrders.count,
                pendingDeliveries: kaspiOrdersManager.deliveries.filter { $0.status != .confirmed }.count
            ) {
                showingKaspiOrders = true
            }
        }
    }
    
    // ‚ö° –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    private var quickActionsSection: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text("–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
                .font(.headline)
                .fontWeight(.semibold)
            
            LazyVGrid(columns: [
                GridItem(.flexible()),
                GridItem(.flexible())
            ], spacing: 12) {
                
                QuickActionCard(
                    icon: "creditcard.circle.fill",
                    title: "Kaspi –ó–∞–∫–∞–∑—ã",
                    subtitle: "\(kaspiOrdersManager.kaspiOrders.count) –∑–∞–∫–∞–∑–æ–≤",
                    color: .orange
                ) {
                    showingKaspiOrders = true
                }
                
                QuickActionCard(
                    icon: "cube.box.fill",
                    title: "–¢–æ–≤–∞—Ä—ã Kaspi",
                    subtitle: "\(productsViewModel.totalProducts) —Ç–æ–≤–∞—Ä–æ–≤",
                    color: .blue
                ) {
                    showingProducts = true
                }
                
                QuickActionCard(
                    icon: "plus.circle.fill",
                    title: "–ó–∞–∫–∞–∑ –Ω–∞ —Å–∫–ª–∞–¥",
                    subtitle: "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑",
                    color: .green
                ) {
                    showingCreateOrder = true
                }
                
                QuickActionCard(
                    icon: "list.bullet.rectangle",
                    title: "–ú–æ–∏ –∑–∞–∫–∞–∑—ã",
                    subtitle: "\(ordersViewModel.totalOrders) –∑–∞–∫–∞–∑–æ–≤",
                    color: .purple
                ) {
                    showingOrders = true
                }
            }
        }
    }
    
    // üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    private var statisticsSection: some View {
        VStack(alignment: .leading, spacing: 16) {
            Text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
                .font(.headline)
                .fontWeight(.semibold)
            
            VStack(spacing: 12) {
                // Kaspi —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                StatisticsRow(
                    icon: "creditcard.fill",
                    title: "Kaspi –∑–∞–∫–∞–∑—ã",
                    value: "\(kaspiOrdersManager.kaspiOrders.count)",
                    subtitle: "–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ",
                    color: .orange
                )
                
                // –î–æ—Å—Ç–∞–≤–∫–∏
                StatisticsRow(
                    icon: "truck.box.fill",
                    title: "–î–æ—Å—Ç–∞–≤–∫–∏",
                    value: "\(kaspiOrdersManager.deliveries.filter { $0.status != .confirmed }.count)",
                    subtitle: "–í –ø—Ä–æ—Ü–µ—Å—Å–µ",
                    color: .blue
                )
                
                // –¢–æ–≤–∞—Ä—ã
                StatisticsRow(
                    icon: "cube.box.fill",
                    title: "–¢–æ–≤–∞—Ä—ã",
                    value: "\(productsViewModel.inStockProducts)",
                    subtitle: "–í –Ω–∞–ª–∏—á–∏–∏",
                    color: .green
                )
                
                // –ó–∞–∫–∞–∑—ã –Ω–∞ —Å–∫–ª–∞–¥
                StatisticsRow(
                    icon: "doc.text.fill",
                    title: "–ó–∞–∫–∞–∑—ã –Ω–∞ —Å–∫–ª–∞–¥",
                    value: "\(ordersViewModel.pendingOrders)",
                    subtitle: "–û–∂–∏–¥–∞—é—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏",
                    color: .purple
                )
            }
            .padding(16)
            .background(Color(UIColor.systemGray6))
            .cornerRadius(12)
        }
    }
    
    // üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã Kaspi
    private var recentKaspiOrdersSection: some View {
        VStack(alignment: .leading, spacing: 16) {
            HStack {
                Text("–ó–∞–∫–∞–∑—ã Kaspi")
                    .font(.headline)
                    .fontWeight(.semibold)
                
                Spacer()
                
                Button("–í—Å–µ –∑–∞–∫–∞–∑—ã") {
                    showingKaspiOrders = true
                }
                .font(.subheadline)
                .foregroundColor(.orange)
            }
            
            if kaspiOrdersManager.isLoading {
                LoadingView("–ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã...")
                    .frame(height: 150)
            } else if kaspiOrdersManager.kaspiOrders.isEmpty {
                EmptyKaspiOrdersView {
                    Task {
                        await kaspiOrdersManager.syncKaspiOrders()
                    }
                }
            } else {
                VStack(spacing: 8) {
                    ForEach(Array(kaspiOrdersManager.kaspiOrders.prefix(3)), id: \.orderId) { order in
                        CompactKaspiOrderCard(
                            order: order,
                            delivery: kaspiOrdersManager.deliveries.first { $0.orderId == order.orderId }
                        )
                    }
                }
            }
        }
    }
    
    // üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã –Ω–∞ —Å–∫–ª–∞–¥
    private var recentWarehouseOrdersSection: some View {
        VStack(alignment: .leading, spacing: 16) {
            HStack {
                Text("–ó–∞–∫–∞–∑—ã –Ω–∞ —Å–∫–ª–∞–¥")
                    .font(.headline)
                    .fontWeight(.semibold)
                
                Spacer()
                
                Button("–í—Å–µ –∑–∞–∫–∞–∑—ã") {
                    showingOrders = true
                }
                .font(.subheadline)
                .foregroundColor(.blue)
            }
            
            if ordersViewModel.isLoading {
                LoadingView("–ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–∫–∞–∑—ã...")
                    .frame(height: 150)
            } else if ordersViewModel.orders.isEmpty {
                EmptyRecentOrdersView {
                    showingCreateOrder = true
                }
            } else {
                VStack(spacing: 8) {
                    ForEach(Array(ordersViewModel.orders.prefix(3))) { order in
                        CompactOrderCard(order: order)
                    }
                }
            }
        }
    }
}

// MARK: - New UI Components

/// –ö–∞—Ä—Ç–æ—á–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Kaspi
struct KaspiStatusCard: View {
    let hasToken: Bool
    let lastSync: Date?
    let newOrders: Int
    let pendingDeliveries: Int
    let onTap: () -> Void
    
    var body: some View {
        Button(action: onTap) {
            HStack(spacing: 16) {
                // Kaspi –∏–∫–æ–Ω–∫–∞
                Image(systemName: "creditcard.circle.fill")
                    .font(.system(size: 40))
                    .foregroundColor(hasToken ? .orange : .gray)
                
                VStack(alignment: .leading, spacing: 4) {
                    HStack {
                        Text("Kaspi.kz")
                            .font(.headline)
                            .fontWeight(.bold)
                        
                        Spacer()
                        
                        // –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                        HStack(spacing: 4) {
                            Circle()
                                .fill(hasToken ? Color.green : Color.red)
                                .frame(width: 8, height: 8)
                            
                            Text(hasToken ? "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ" : "–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")
                                .font(.caption)
                                .foregroundColor(hasToken ? .green : .red)
                        }
                    }
                    
                    if hasToken {
                        HStack(spacing: 16) {
                            VStack(alignment: .leading, spacing: 2) {
                                Text("\(newOrders)")
                                    .font(.title3)
                                    .fontWeight(.bold)
                                    .foregroundColor(.primary)
                                
                                Text("–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                            }
                            
                            VStack(alignment: .leading, spacing: 2) {
                                Text("\(pendingDeliveries)")
                                    .font(.title3)
                                    .fontWeight(.bold)
                                    .foregroundColor(.primary)
                                
                                Text("–í –¥–æ—Å—Ç–∞–≤–∫–µ")
                                    .font(.caption)
                                    .foregroundColor(.secondary)
                            }
                        }
                        
                        if let lastSync = lastSync {
                            Text("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: \(DateFormatter.shortTime.string(from: lastSync))")
                                .font(.caption)
                                .foregroundColor(.secondary)
                        }
                    } else {
                        Text("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ API —Ç–æ–∫–µ–Ω –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Kaspi")
                            .font(.subheadline)
                            .foregroundColor(.secondary)
                    }
                }
                
                Image(systemName: "chevron.right")
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            .padding(16)
            .background(Color(UIColor.systemBackground))
            .cornerRadius(12)
            .overlay(
                RoundedRectangle(cornerRadius: 12)
                    .stroke(hasToken ? Color.orange.opacity(0.3) : Color.gray.opacity(0.3), lineWidth: 1)
            )
        }
        .buttonStyle(PlainButtonStyle())
    }
}

/// –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–∫–∞–∑–∞ Kaspi
struct CompactKaspiOrderCard: View {
    let order: KaspiOrder
    let delivery: DeliveryConfirmation?
    
    var body: some View {
        HStack(spacing: 12) {
            // –°—Ç–∞—Ç—É—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            Circle()
                .fill(delivery?.status == .confirmed ? Color.green : Color.orange)
                .frame(width: 12, height: 12)
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
            VStack(alignment: .leading, spacing: 2) {
                Text("–ó–∞–∫–∞–∑ #\(order.orderNumber)")
                    .font(.subheadline)
                    .fontWeight(.medium)
                
                Text(order.customerInfo.name)
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            Spacer()
            
            // –°—Ç–∞—Ç—É—Å –∏ —Å—É–º–º–∞
            VStack(alignment: .trailing, spacing: 2) {
                if let delivery = delivery {
                    Text(delivery.status.rawValue)
                        .font(.caption)
                        .fontWeight(.medium)
                        .foregroundColor(delivery.status == .confirmed ? .green : .orange)
                } else {
                    Text("–ù–æ–≤—ã–π")
                        .font(.caption)
                        .fontWeight(.medium)
                        .foregroundColor(.blue)
                }
                
                Text(String(format: "%.0f ‚Ç∏", order.totalAmount))
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
        }
        .padding(12)
        .background(Color(UIColor.systemBackground))
        .cornerRadius(8)
        .overlay(
            RoundedRectangle(cornerRadius: 8)
                .stroke(Color.orange.opacity(0.2), lineWidth: 1)
        )
    }
}

/// –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ Kaspi
struct EmptyKaspiOrdersView: View {
    let onSync: () -> Void
    
    var body: some View {
        VStack(spacing: 12) {
            Image(systemName: "creditcard.circle")
                .font(.system(size: 40))
                .foregroundColor(.secondary)
            
            Text("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ Kaspi")
                .font(.subheadline)
                .fontWeight(.medium)
            
            Text("–ó–∞–∫–∞–∑—ã –ø–æ—è–≤—è—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                .font(.caption)
                .foregroundColor(.secondary)
                .multilineTextAlignment(.center)
            
            Button("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å") {
                onSync()
            }
            .font(.caption)
            .fontWeight(.semibold)
            .padding(.horizontal, 16)
            .padding(.vertical, 6)
            .background(Color.orange)
            .foregroundColor(.white)
            .cornerRadius(8)
        }
        .frame(maxWidth: .infinity)
        .padding(20)
        .background(Color(UIColor.systemGray6))
        .cornerRadius(12)
    }
}

/// –ö–∞—Ä—Ç–æ—á–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è)
struct QuickActionCard: View {
    let icon: String
    let title: String
    let subtitle: String
    let color: Color
    let action: () -> Void
    
    var body: some View {
        Button(action: action) {
            VStack(spacing: 12) {
                Image(systemName: icon)
                    .font(.system(size: 32))
                    .foregroundColor(color)
                
                VStack(spacing: 4) {
                    Text(title)
                        .font(.headline)
                        .fontWeight(.semibold)
                        .foregroundColor(.primary)
                        .multilineTextAlignment(.center)
                    
                    Text(subtitle)
                        .font(.caption)
                        .foregroundColor(.secondary)
                        .multilineTextAlignment(.center)
                }
            }
            .frame(maxWidth: .infinity)
            .padding(20)
            .background(Color(UIColor.systemBackground))
            .cornerRadius(12)
            .shadow(color: .black.opacity(0.05), radius: 4, x: 0, y: 2)
        }
        .buttonStyle(PlainButtonStyle())
    }
}

/// –°—Ç—Ä–æ–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è)
struct StatisticsRow: View {
    let icon: String
    let title: String
    let value: String
    let subtitle: String
    let color: Color
    
    var body: some View {
        HStack(spacing: 16) {
            Image(systemName: icon)
                .font(.title2)
                .foregroundColor(color)
                .frame(width: 32)
            
            VStack(alignment: .leading, spacing: 2) {
                Text(title)
                    .font(.subheadline)
                    .fontWeight(.medium)
                    .foregroundColor(.primary)
                
                Text(subtitle)
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            Spacer()
            
            Text(value)
                .font(.title3)
                .fontWeight(.bold)
                .foregroundColor(color)
        }
    }
}

/// –ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–∫–ª–∞–¥
struct CompactOrderCard: View {
    let order: Order
    
    var body: some View {
        HStack(spacing: 12) {
            // –°—Ç–∞—Ç—É—Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            Circle()
                .fill(Color(order.statusColor))
                .frame(width: 12, height: 12)
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ
            VStack(alignment: .leading, spacing: 2) {
                Text(order.orderNumber)
                    .font(.subheadline)
                    .fontWeight(.medium)
                
                Text(order.warehouseName)
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
            
            Spacer()
            
            // –°—Ç–∞—Ç—É—Å –∏ –¥–∞—Ç–∞
            VStack(alignment: .trailing, spacing: 2) {
                Text(order.status.rawValue)
                    .font(.caption)
                    .fontWeight(.medium)
                    .foregroundColor(Color(order.statusColor))
                
                Text(DateFormatter.shortDate.string(from: order.createdAt))
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
        }
        .padding(12)
        .background(Color(UIColor.systemBackground))
        .cornerRadius(8)
        .overlay(
            RoundedRectangle(cornerRadius: 8)
                .stroke(Color(order.statusColor).opacity(0.2), lineWidth: 1)
        )
    }
}

/// –ü—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤
struct EmptyRecentOrdersView: View {
    let onCreateOrder: () -> Void
    
    var body: some View {
        VStack(spacing: 12) {
            Image(systemName: "doc.text.below.ecg")
                .font(.system(size: 40))
                .foregroundColor(.secondary)
            
            Text("–ó–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥ –ø–æ–∫–∞ –Ω–µ—Ç")
                .font(.subheadline)
                .fontWeight(.medium)
            
            Text("–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–æ–≤–∞—Ä–æ–≤")
                .font(.caption)
                .foregroundColor(.secondary)
                .multilineTextAlignment(.center)
            
            Button("–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑") {
                onCreateOrder()
            }
            .font(.caption)
            .fontWeight(.semibold)
            .padding(.horizontal, 16)
            .padding(.vertical, 6)
            .background(Color.blue)
            .foregroundColor(.white)
            .cornerRadius(8)
        }
        .frame(maxWidth: .infinity)
        .padding(20)
        .background(Color(UIColor.systemGray6))
        .cornerRadius(12)
    }
}

#Preview {
    SellerDashboard()
}
