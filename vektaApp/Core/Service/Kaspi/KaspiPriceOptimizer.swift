//
//  KaspiPriceOptimizer.swift
//  vektaApp
//
//  –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–¥–µ–º–ø–∏–Ω–≥–∞ —Ü–µ–Ω.
//

import Foundation

@MainActor
final class KaspiPriceOptimizer {
    private let api: KaspiAPIService

    init(apiService: KaspiAPIService) {
        self.api = apiService
    }

    /// –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º –∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤ —Ç–æ–ø–µ,
    /// —Å–Ω–∏–∂–∞–µ—Ç —Ü–µ–Ω—É –Ω–∞ 2% (–∏–ª–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç).
    func runAutoDump() async {
        do {
            print("üöÄ –°—Ç–∞—Ä—Ç –∞–≤—Ç–æ–¥–µ–º–ø–∏–Ω–≥–∞...")
            let kaspiProducts = try await api.fetchAllProducts()
            for kp in kaspiProducts where kp.isActive {
                let pos = try await api.fetchProductPosition(productId: kp.id)
                guard pos > 1 else {
                    print("‚úÖ \(kp.name) —É–∂–µ –≤ —Ç–æ–ø–µ (–ø–æ–∑–∏—Ü–∏—è \(pos)).")
                    continue
                }
                let newPrice = Int(floor(kp.price * 0.98))
                try await api.updatePrice(productId: kp.id, newPrice: newPrice)
                print("üìâ \(kp.name) —Å–Ω–∏–∂–µ–Ω–∞ –¥–æ \(newPrice).")
            }
            print("üéâ –ê–≤—Ç–æ–¥–µ–º–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–¥–µ–º–ø–∏–Ω–≥–∞: \(error.localizedDescription)")
        }
    }
}
