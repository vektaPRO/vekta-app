//
//  KaspiPriceOptimizer.swift
//  vektaApp
//
//  –õ–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–¥–µ–º–ø–∏–Ω–≥–∞ —Ü–µ–Ω.
//

import Foundation

@MainActor
final class KaspiPriceOptimizer {
    private let api: KaspiAPIService

    init(apiService: KaspiAPIService) {
        self.api = apiService
    }

    /// –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º –∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤ —Ç–æ–ø–µ,
    /// —Å–Ω–∏–∂–∞–µ—Ç —Ü–µ–Ω—É –Ω–∞ 2% (–∏–ª–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç).
    /// –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º —Ç–æ–≤–∞—Ä–∞–º –∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –≤ —Ç–æ–ø–µ,
    /// —Å–Ω–∏–∂–∞–µ—Ç —Ü–µ–Ω—É –Ω–∞ 2% (–∏–ª–∏ –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ–Ω—Ç).
    func runAutoDump() async {
        do {
            print("üöÄ –°—Ç–∞—Ä—Ç –∞–≤—Ç–æ–¥–µ–º–ø–∏–Ω–≥–∞...")
            
            // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ Kaspi API (—Å–ª–æ–∂–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
            let kaspiProducts = try await api.fetchAllProducts()
            
            // 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏ (–ø—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
            let localProducts = kaspiProducts.map { $0.toLocalProduct() }
            
            // 3. –†–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏
            for product in localProducts where product.isActive {
                
                // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é —Ç–æ–≤–∞—Ä–∞ –≤ –ø–æ–∏—Å–∫–µ
                let pos = try await api.fetchProductPosition(productId: product.id)
                
                // –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ —Ç–æ–ø–µ (–ø–æ–∑–∏—Ü–∏—è 1) - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                guard pos > 1 else {
                    print("‚úÖ \(product.name) —É–∂–µ –≤ —Ç–æ–ø–µ (–ø–æ–∑–∏—Ü–∏—è \(pos)).")
                    continue
                }
                
                // –°–Ω–∏–∂–∞–µ–º —Ü–µ–Ω—É –Ω–∞ 2%
                let newPrice = Int(floor(product.price * 0.98))
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É —á–µ—Ä–µ–∑ API
                try await api.updatePrice(productId: product.id, newPrice: newPrice)
                
                print("üìâ \(product.name) —Å–Ω–∏–∂–µ–Ω–∞ –¥–æ \(newPrice).")
            }
            
            print("üéâ –ê–≤—Ç–æ–¥–µ–º–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.")
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–¥–µ–º–ø–∏–Ω–≥–∞: \(error.localizedDescription)")
        }
    }
}
