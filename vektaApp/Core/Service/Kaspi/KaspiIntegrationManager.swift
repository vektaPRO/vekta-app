//
//  KaspiBusinessLogic.swift
//  vektaApp
//
//  –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Kaspi
//

import Foundation
import FirebaseFirestore
import FirebaseAuth

// MARK: - Kaspi Integration Manager

@MainActor
final class KaspiIntegrationManager: ObservableObject {
    
    // MARK: - Published Properties
    @Published var isAutoProcessingEnabled = false
    @Published var newOrders: [KaspiOrder] = []
    @Published var processedOrders: [KaspiOrder] = []
    @Published var deliveries: [DeliveryConfirmation] = []
    @Published var products: [Product] = []
    
    @Published var isLoading = false
    @Published var errorMessage: String?
    @Published var successMessage: String?
    
    // Statistics
    @Published var todayOrdersCount = 0
    @Published var todayDeliveredCount = 0
    @Published var pendingDeliveriesCount = 0
    
    // MARK: - Private Properties
    private let kaspiAPI = KaspiAPIService()
    private let db = Firestore.firestore()
    private var autoProcessingTimer: Timer?
    private var syncTimer: Timer?
    
    // MARK: - Configuration
    private let autoProcessingInterval: TimeInterval = 300 // 5 –º–∏–Ω—É—Ç
    private let syncInterval: TimeInterval = 600 // 10 –º–∏–Ω—É—Ç
    
    init() {
        setupTimers()
        loadConfiguration()
    }
    
    deinit {
        autoProcessingTimer?.invalidate()
        syncTimer?.invalidate()
    }
    
    // MARK: - Setup & Configuration
    
    private func setupTimers() {
        // –¢–∞–π–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤
        autoProcessingTimer = Timer.scheduledTimer(withTimeInterval: autoProcessingInterval, repeats: true) { [weak self] _ in
            guard let self = self else { return }
            if self.isAutoProcessingEnabled {
                Task {
                    await self.processNewOrdersAutomatically()
                }
            }
        }
        
        // –¢–∞–π–º–µ—Ä —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        syncTimer = Timer.scheduledTimer(withTimeInterval: syncInterval, repeats: true) { [weak self] _ in
            guard let self = self else { return }
            Task {
                await self.syncData()
            }
        }
    }
    
    private func loadConfiguration() {
        guard let userId = Auth.auth().currentUser?.uid else { return }
        
        db.collection("sellers").document(userId).getDocument { [weak self] snapshot, error in
            DispatchQueue.main.async {
                if let data = snapshot?.data() {
                    self?.isAutoProcessingEnabled = data["autoProcessingEnabled"] as? Bool ?? false
                }
            }
        }
    }
    
    // MARK: - Main Business Logic
    
    /// –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    func syncData() async {
        await withTaskGroup(of: Void.self) { group in
            group.addTask { await self.syncOrders() }
            group.addTask { await self.syncProducts() }
            group.addTask { await self.updateStatistics() }
        }
    }
    
    /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–∫–∞–∑–æ–≤
    func syncOrders() async {
        do {
            // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            let fromDate = Calendar.current.date(byAdding: .day, value: -1, to: Date()) ?? Date()
            
            let ordersResponse = try await kaspiAPI.getOrders(
                page: 0,
                size: 100,
                state: .new,
                creationDateFrom: fromDate
            )
            
            let fetchedOrders = ordersResponse.data ?? []
            
            // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –Ω–æ–≤—ã–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ
            newOrders = fetchedOrders.filter { order in
                order.attributes.status == .acceptedByMerchant ||
                order.attributes.state == .new
            }
            
            processedOrders = fetchedOrders.filter { order in
                order.attributes.status != .acceptedByMerchant &&
                order.attributes.state != .new
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore
            await saveOrdersToFirestore(fetchedOrders)
            
        } catch {
            errorMessage = "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤: \(error.localizedDescription)"
        }
    }
    
    /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    func syncProducts() async {
        do {
            let syncedProducts = try await kaspiAPI.syncAllProducts()
            products = syncedProducts
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore
            await saveProductsToFirestore(syncedProducts)
            
        } catch {
            errorMessage = "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: \(error.localizedDescription)"
        }
    }
    
    // MARK: - Order Processing
    
    /// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    func processNewOrdersAutomatically() async {
        guard !newOrders.isEmpty else { return }
        
        print("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ \(newOrders.count) –∑–∞–∫–∞–∑–æ–≤")
        
        for order in newOrders {
            await processOrder(order)
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await syncOrders()
    }
    
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    func processOrder(_ order: KaspiOrder) async {
        do {
            // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤
            let hasStock = await checkOrderStock(order)
            if !hasStock {
                await cancelOrderDueToStock(order)
                return
            }
            
            // 2. –ü—Ä–∏–Ω–∏–º–∞–µ–º –∑–∞–∫–∞–∑
            let acceptedOrder = try await kaspiAPI.acceptOrder(
                orderId: order.id,
                orderCode: order.attributes.code
            )
            
            // 3. –ï—Å–ª–∏ Kaspi –¥–æ—Å—Ç–∞–≤–∫–∞ - —Å—Ä–∞–∑—É –ø–µ—Ä–µ–¥–∞–µ–º
            if order.attributes.isKaspiDelivery {
                let shippedOrder = try await kaspiAPI.shipOrder(orderId: acceptedOrder.id)
                print("‚úÖ –ó–∞–∫–∞–∑ \(order.attributes.code) –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É Kaspi")
                
                // 4. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –¥–æ—Å—Ç–∞–≤–∫–µ
                await createDeliveryRecord(shippedOrder)
            } else {
                // 5. –î–ª—è —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –ø—Ä–æ–¥–∞–≤—Ü—É
                await createSellerTask(acceptedOrder)
            }
            
            successMessage = "‚úÖ –ó–∞–∫–∞–∑ \(order.attributes.code) –æ–±—Ä–∞–±–æ—Ç–∞–Ω"
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ \(order.attributes.code): \(error)")
            errorMessage = "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ \(order.attributes.code)"
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–∫–∞–∑–µ
    private func checkOrderStock(_ order: KaspiOrder) async -> Bool {
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–∫–∞–∑–∞
        do {
            let entries = try await kaspiAPI.getOrderEntries(orderId: order.id)
            
            for entry in entries {
                // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                let product = try await kaspiAPI.getOrderEntryProduct(entryId: entry.id)
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                if product.attributes.availableAmount < entry.attributes.quantity {
                    print("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞: \(product.attributes.name)")
                    return false
                }
            }
            
            return true
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è: \(error)")
            return false
        }
    }
    
    /// –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–æ–≤–∞—Ä–∞
    private func cancelOrderDueToStock(_ order: KaspiOrder) async {
        do {
            let entries = try await kaspiAPI.getOrderEntries(orderId: order.id)
            
            for entry in entries {
                try await kaspiAPI.cancelOrderEntry(
                    entryId: entry.id,
                    reason: "MERCHANT_OUT_OF_STOCK",
                    notes: "–¢–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ —Å–∫–ª–∞–¥–µ"
                )
            }
            
            print("‚ùå –ó–∞–∫–∞–∑ \(order.attributes.code) –æ—Ç–º–µ–Ω–µ–Ω –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–æ–≤–∞—Ä–∞")
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞: \(error)")
        }
    }
    
    /// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –¥–æ—Å—Ç–∞–≤–∫–µ
    private func createDeliveryRecord(_ order: KaspiOrder) async {
        do {
            // –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞ (–∑–∞–≥–ª—É—à–∫–∞)
            let courier = await findAvailableCourier()
            
            let delivery = try await kaspiAPI.createDeliveryFromKaspiOrder(
                order,
                courierId: courier.id,
                courierName: courier.name
            )
            
            deliveries.append(delivery)
            
            // –£–≤–µ–¥–æ–º–ª—è–µ–º –∫—É—Ä—å–µ—Ä–∞
            await notifyCourier(courier, about: delivery)
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏: \(error)")
        }
    }
    
    /// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ (—Å–∞–º–æ–≤—ã–≤–æ–∑)
    private func createSellerTask(_ order: KaspiOrder) async {
        let taskData: [String: Any] = [
            "type": "self_pickup",
            "orderId": order.id,
            "orderCode": order.attributes.code,
            "customerName": order.attributes.customer.name,
            "customerPhone": order.attributes.customer.cellPhone,
            "totalAmount": order.attributes.totalPrice,
            "createdAt": FieldValue.serverTimestamp(),
            "status": "pending",
            "sellerId": Auth.auth().currentUser?.uid ?? ""
        ]
        
        do {
            try await db.collection("sellerTasks").addDocument(data: taskData)
            print("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ —Å–∞–º–æ–≤—ã–≤–æ–∑–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ \(order.attributes.code)")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: \(error)")
        }
    }
    
    // MARK: - Delivery Management
    
    /// –ù–∞–π—Ç–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
    private func findAvailableCourier() async -> CourierInfo {
        // TODO: –†–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –∫—É—Ä—å–µ—Ä–∞
        // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫—É—Ä—å–µ—Ä–∞
        return CourierInfo(
            id: "courier_\(UUID().uuidString)",
            name: "–ö—É—Ä—å–µ—Ä –¢–µ—Å—Ç–æ–≤—ã–π",
            phone: "+77771234567",
            isAvailable: true,
            location: "–ê–ª–º–∞—Ç—ã"
        )
    }
    
    /// –£–≤–µ–¥–æ–º–∏—Ç—å –∫—É—Ä—å–µ—Ä–∞ –æ –Ω–æ–≤–æ–π –¥–æ—Å—Ç–∞–≤–∫–µ
    private func notifyCourier(_ courier: CourierInfo, about delivery: DeliveryConfirmation) async {
        let notificationData: [String: Any] = [
            "userId": courier.id,
            "type": "new_delivery",
            "title": "–ù–æ–≤–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞",
            "message": "–í–∞–º –Ω–∞–∑–Ω–∞—á–µ–Ω –∑–∞–∫–∞–∑ \(delivery.trackingNumber)",
            "deliveryId": delivery.id,
            "orderId": delivery.orderId,
            "customerPhone": delivery.customerPhone,
            "address": delivery.deliveryAddress,
            "createdAt": FieldValue.serverTimestamp(),
            "read": false,
            "priority": "normal"
        ]
        
        do {
            try await db.collection("notifications").addDocument(data: notificationData)
            print("‚úÖ –ö—É—Ä—å–µ—Ä \(courier.name) —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –¥–æ—Å—Ç–∞–≤–∫–µ")
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: \(error)")
        }
    }
    
    // MARK: - Delivery Confirmation
    
    /// –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏
    func requestDeliveryCode(_ delivery: DeliveryConfirmation) async -> Bool {
        do {
            let codeId = try await kaspiAPI.requestDeliveryConfirmationCode(
                orderId: delivery.orderId,
                trackingNumber: delivery.trackingNumber,
                customerPhone: delivery.customerPhone
            )
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏
            var updatedDelivery = delivery.withConfirmationCode(codeId)
            updatedDelivery.status = .awaitingCode
            
            try await updateDeliveryInFirestore(updatedDelivery)
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
            if let index = deliveries.firstIndex(where: { $0.id == delivery.id }) {
                deliveries[index] = updatedDelivery
            }
            
            return true
            
        } catch {
            errorMessage = "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–¥–∞: \(error.localizedDescription)"
            return false
        }
    }
    
    /// –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É —Å –∫–æ–¥–æ–º
    func confirmDelivery(_ delivery: DeliveryConfirmation, code: String) async -> Bool {
        do {
            let isConfirmed = try await kaspiAPI.confirmDeliveryWithCode(
                orderId: delivery.orderId,
                trackingNumber: delivery.trackingNumber,
                securityCode: code
            )
            
            if isConfirmed {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏
                let confirmedDelivery = delivery.confirm(by: Auth.auth().currentUser?.uid ?? "")
                
                try await updateDeliveryInFirestore(confirmedDelivery)
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
                if let index = deliveries.firstIndex(where: { $0.id == delivery.id }) {
                    deliveries[index] = confirmedDelivery
                }
                
                successMessage = "‚úÖ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
                return true
            } else {
                // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                let updatedDelivery = delivery.incrementAttempts()
                
                try await updateDeliveryInFirestore(updatedDelivery)
                
                if let index = deliveries.firstIndex(where: { $0.id == delivery.id }) {
                    deliveries[index] = updatedDelivery
                }
                
                errorMessage = "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
                return false
            }
            
        } catch {
            errorMessage = "–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: \(error.localizedDescription)"
            return false
        }
    }
    
    // MARK: - Statistics
    
    private func updateStatistics() async {
        let today = Calendar.current.startOfDay(for: Date())
        let tomorrow = Calendar.current.date(byAdding: .day, value: 1, to: today)!
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        todayOrdersCount = newOrders.filter { order in
            order.attributes.creationDate >= today && order.attributes.creationDate < tomorrow
        }.count
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        todayDeliveredCount = deliveries.filter { delivery in
            guard let confirmedAt = delivery.confirmedAt else { return false }
            return confirmedAt >= today && confirmedAt < tomorrow
        }.count
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏
        pendingDeliveriesCount = deliveries.filter { delivery in
            delivery.status != .confirmed && delivery.status != .cancelled
        }.count
    }
    
    // MARK: - Configuration Management
    
    /// –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    func toggleAutoProcessing() async {
        isAutoProcessingEnabled.toggle()
        
        guard let userId = Auth.auth().currentUser?.uid else { return }
        
        do {
            try await db.collection("sellers").document(userId).setData([
                "autoProcessingEnabled": isAutoProcessingEnabled,
                "updatedAt": FieldValue.serverTimestamp()
            ], merge: true)
            
            successMessage = isAutoProcessingEnabled ?
                "‚úÖ –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞" : "‚è∏Ô∏è –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞"
                
        } catch {
            errorMessage = "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: \(error.localizedDescription)"
        }
    }
    
    // MARK: - Data Persistence
    
    private func saveOrdersToFirestore(_ orders: [KaspiOrder]) async {
        guard let userId = Auth.auth().currentUser?.uid else { return }
        
        let batch = db.batch()
        
        for order in orders {
            let orderData: [String: Any] = [
                "kaspiOrderId": order.id,
                "orderCode": order.attributes.code,
                "customerName": order.attributes.customer.name,
                "customerPhone": order.attributes.customer.cellPhone,
                "customerEmail": order.attributes.customer.email ?? "",
                "deliveryAddress": order.attributes.deliveryAddress.formattedAddress,
                "totalAmount": order.attributes.totalPrice,
                "status": order.attributes.status.rawValue,
                "state": order.attributes.state.rawValue,
                "isKaspiDelivery": order.attributes.isKaspiDelivery,
                "createdAt": Timestamp(date: order.attributes.creationDate),
                "syncedAt": FieldValue.serverTimestamp(),
                "sellerId": userId
            ]
            
            let docRef = db.collection("kaspiOrders").document(order.id)
            batch.setData(orderData, forDocument: docRef, merge: true)
        }
        
        do {
            try await batch.commit()
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: \(error)")
        }
    }
    
    private func saveProductsToFirestore(_ products: [Product]) async {
        guard let userId = Auth.auth().currentUser?.uid else { return }
        
        let batch = db.batch()
        
        for product in products {
            let productData = product.toDictionary()
            let docRef = db.collection("sellers").document(userId)
                .collection("products").document(product.id)
            
            batch.setData(productData, forDocument: docRef, merge: true)
        }
        
        do {
            try await batch.commit()
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: \(error)")
        }
    }
    
    private func updateDeliveryInFirestore(_ delivery: DeliveryConfirmation) async throws {
        let deliveryData = delivery.toDictionary()
        try await db.collection("deliveries").document(delivery.id).setData(deliveryData)
    }
    
    // MARK: - Public Interface
    
    func clearMessages() {
        errorMessage = nil
        successMessage = nil
    }
    
    func refreshData() async {
        await syncData()
    }
}
