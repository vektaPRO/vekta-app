//
//  APIConfiguration.swift
//  vektaApp
//
//  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ API –æ–∫—Ä—É–∂–µ–Ω–∏—è–º–∏
//

import Foundation
import UIKit
// MARK: - API Environment

enum APIEnvironment {
    case development
    case staging
    case production
    
    var baseURL: String {
        switch self {
        case .development:
            return "https://sandbox.kaspi.kz/merchantcabinet/api/v1"
        case .staging:
            return "https://staging.kaspi.kz/merchantcabinet/api/v1"
        case .production:
            return "https://kaspi.kz/merchantcabinet/api/v1"
        }
    }
    
    var timeout: TimeInterval {
        switch self {
        case .development:
            return 60.0
        case .staging:
            return 45.0
        case .production:
            return 30.0
        }
    }
    
    var maxRetries: Int {
        switch self {
        case .development:
            return 5
        case .staging:
            return 3
        case .production:
            return 3
        }
    }
}

// MARK: - API Configuration

class APIConfiguration {
    
    static let shared = APIConfiguration()
    
    // –¢–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    #if DEBUG
    private(set) var environment: APIEnvironment = .development
    #else
    private(set) var environment: APIEnvironment = .production
    #endif
    
    // API –∫–ª—é—á–∏ (–∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞)
    // –≠—Ç–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ù–ï –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ - –∫–∞–∂–¥—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü –∏–º–µ–µ—Ç —Å–≤–æ–π —Ç–æ–∫–µ–Ω
    var kaspiAPIKey: String? {
        // –¢–æ–ª—å–∫–æ –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        return nil
    }
    
    var kaspiMerchantId: String? {
        // Merchant ID –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
        return nil
    }
    
    // Rate limiting
    let maxRequestsPerMinute = 60
    let maxRequestsPerHour = 1000
    
    // SMS Configuration
    let smsCodeLength = 6
    let smsCodeExpirationMinutes = 10
    let maxSMSAttempts = 3
    let smsResendCooldownSeconds = 120
    
    // Pagination
    let defaultPageSize = 50
    let maxPageSize = 100
    
    // Cache settings
    let cacheExpirationHours = 4
    let maxCacheSize = 100 // MB
    
    private init() {}
    
    // MARK: - Methods
    
    /// –ò–∑–º–µ–Ω–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è DEBUG)
    func setEnvironment(_ environment: APIEnvironment) {
        #if DEBUG
        self.environment = environment
        print("üîß API Environment changed to: \(environment)")
        #endif
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π URL –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    func fullURL(for endpoint: String) -> String {
        return environment.baseURL + endpoint
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    func validateConfiguration() -> Bool {
        // –ë–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º Info.plist
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å–µ–≥–¥–∞ –≤–∞–ª–∏–¥–Ω–∞, —Ç–æ–∫–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
        return true
    }
}

// MARK: - API Headers Builder

extension APIConfiguration {
    
    /// –ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
    func buildHeaders(
        apiToken: String? = nil,
        contentType: String = "application/json",
        additionalHeaders: [String: String]? = nil
    ) -> [String: String] {
        
        var headers: [String: String] = [
            "Accept": "application/json",
            "Content-Type": contentType,
            "User-Agent": userAgent,
            "X-Client-Version": appVersion,
            "X-Platform": "iOS",
            "X-Device-ID": deviceId
        ]
        
        // –î–æ–±–∞–≤–ª—è–µ–º API —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
        if let token = apiToken {
            headers["Authorization"] = "Bearer \(token)"
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º merchant ID –µ—Å–ª–∏ –µ—Å—Ç—å
        if let merchantId = kaspiMerchantId {
            headers["X-Merchant-ID"] = merchantId
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if let additional = additionalHeaders {
            headers.merge(additional) { _, new in new }
        }
        
        return headers
    }
    
    private var userAgent: String {
        let appName = Bundle.main.object(forInfoDictionaryKey: "CFBundleName") as? String ?? "VektaApp"
        let appVersion = self.appVersion
        let osVersion = UIDevice.current.systemVersion
        return "\(appName)/\(appVersion) iOS/\(osVersion)"
    }
    
    private var appVersion: String {
        let version = Bundle.main.object(forInfoDictionaryKey: "CFBundleShortVersionString") as? String ?? "1.0"
        let build = Bundle.main.object(forInfoDictionaryKey: "CFBundleVersion") as? String ?? "1"
        return "\(version) (\(build))"
    }
    
    private var deviceId: String {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è –≤–µ–Ω–¥–æ—Ä–∞ –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        return UIDevice.current.identifierForVendor?.uuidString ?? UUID().uuidString
    }
}

// MARK: - Error Messages

extension APIConfiguration {
    
    /// –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
    enum ErrorMessage {
        static let noInternet = "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É"
        static let serverError = "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
        static let unauthorized = "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"
        static let forbidden = "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"
        static let notFound = "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        static let rateLimited = "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ"
        static let invalidData = "–ü–æ–ª—É—á–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
        static let timeout = "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"
        static let unknown = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ –∫–æ–¥—É HTTP
    static func errorMessage(for statusCode: Int) -> String {
        switch statusCode {
        case 400:
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å"
        case 401:
            return ErrorMessage.unauthorized
        case 403:
            return ErrorMessage.forbidden
        case 404:
            return ErrorMessage.notFound
        case 429:
            return ErrorMessage.rateLimited
        case 500...599:
            return ErrorMessage.serverError
        default:
            return ErrorMessage.unknown
        }
    }
}
