//
//  ProductsViewModel.swift
//  vektaApp
//
//  Created by Almas Kadeshov on 30.06.2025.
//

import SwiftUI
import FirebaseFirestore
import FirebaseAuth

// üß† ViewModel –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞–º–∏
class ProductsViewModel: ObservableObject {
    
    // üìä –î–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–æ–≤
    @Published var products: [Product] = []
    @Published var filteredProducts: [Product] = []
    
    // üîç –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä—ã
    @Published var searchText: String = "" {
        didSet {
            filterProducts()
        }
    }
    @Published var selectedStatus: ProductStatus? = nil {
        didSet {
            filterProducts()
        }
    }
    @Published var selectedCategory: String = "–í—Å–µ" {
        didSet {
            filterProducts()
        }
    }
    
    // üì± –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    @Published var isLoading: Bool = false
    @Published var errorMessage: String?
    @Published var isRefreshing: Bool = false
    
    // üî• Firebase
    private let db = Firestore.firestore()
    private var listener: ListenerRegistration?
    
    // üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
    var categories: [String] {
        let allCategories = products.map { $0.category }
        let uniqueCategories = Array(Set(allCategories)).sorted()
        return ["–í—Å–µ"] + uniqueCategories
    }
    
    // üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    var totalProducts: Int { products.count }
    var inStockProducts: Int { products.filter { $0.status == .inStock }.count }
    var outOfStockProducts: Int { products.filter { $0.status == .outOfStock }.count }
    
    init() {
        loadProducts()
    }
    
    deinit {
        listener?.remove()
    }
    
    // üì¶ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã
    func loadProducts() {
        guard let userId = Auth.auth().currentUser?.uid else {
            errorMessage = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
            return
        }
        
        isLoading = true
        errorMessage = nil
        
        // –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        // –í –ø—Ä–æ–¥–∞–∫—à–Ω–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Firestore + Kaspi API
        DispatchQueue.main.asyncAfter(deadline: .now() + 1.0) {
            self.products = Product.sampleProducts
            self.filterProducts()
            self.isLoading = false
        }
        
        // TODO: –†–µ–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Firestore
        /*
        listener = db.collection("sellers").document(userId)
            .collection("products")
            .addSnapshotListener { [weak self] snapshot, error in
                
                DispatchQueue.main.async {
                    self?.isLoading = false
                    
                    if let error = error {
                        self?.errorMessage = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: \(error.localizedDescription)"
                        return
                    }
                    
                    guard let documents = snapshot?.documents else {
                        self?.products = []
                        self?.filterProducts()
                        return
                    }
                    
                    self?.products = documents.compactMap { doc in
                        Product.fromFirestore(doc.data(), id: doc.documentID)
                    }
                    
                    self?.filterProducts()
                }
            }
        */
    }
    
    // üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã
    func refreshProducts() {
        isRefreshing = true
        
        // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
            self.loadProducts()
            self.isRefreshing = false
        }
    }
    
    // üîç –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä—ã
    private func filterProducts() {
        var filtered = products
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É
        if !searchText.isEmpty {
            filtered = filtered.filter { product in
                product.name.localizedCaseInsensitiveContains(searchText) ||
                product.description.localizedCaseInsensitiveContains(searchText) ||
                product.kaspiProductId.localizedCaseInsensitiveContains(searchText)
            }
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        if let status = selectedStatus {
            filtered = filtered.filter { $0.status == status }
        }
        
        // –§–∏–ª—å—Ç—Ä –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if selectedCategory != "–í—Å–µ" {
            filtered = filtered.filter { $0.category == selectedCategory }
        }
        
        filteredProducts = filtered
    }
    
    // üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Kaspi API
    func syncWithKaspiAPI() {
        isLoading = true
        errorMessage = nil
        
        // TODO: –†–µ–∞–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Kaspi API
        DispatchQueue.main.asyncAfter(deadline: .now() + 3.0) {
            self.isLoading = false
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
        }
    }
    
    // ‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –æ—Ç–≥—Ä—É–∑–∫—É –Ω–∞ —Å–∫–ª–∞–¥
    func addToWarehouseShipment(product: Product) {
        // TODO: –õ–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Ç–≥—Ä—É–∑–∫—É
        print("–î–æ–±–∞–≤–ª–µ–Ω –≤ –æ—Ç–≥—Ä—É–∑–∫—É: \(product.name)")
    }
    
    // üìä –û–±–Ω–æ–≤–∏—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–∞
    func updateProductStock(productId: String, warehouseId: String, newQuantity: Int) {
        // TODO: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–æ–≤ –≤ Firestore
        print("–û–±–Ω–æ–≤–ª–µ–Ω—ã –æ—Å—Ç–∞—Ç–∫–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ \(productId)")
    }
    
    // üóëÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä
    func deactivateProduct(product: Product) {
        // TODO: –î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ Firestore
        print("–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ç–æ–≤–∞—Ä: \(product.name)")
    }
}

// MARK: - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
extension ProductsViewModel {
    
    // üé® –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
    func colorForStatus(_ status: ProductStatus) -> Color {
        switch status {
        case .inStock:
            return .green
        case .outOfStock:
            return .orange
        case .inactive:
            return .gray
        }
    }
    
    // üìä –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏
    var inStockPercentage: Double {
        guard totalProducts > 0 else { return 0 }
        return Double(inStockProducts) / Double(totalProducts) * 100
    }
    
    // üîç –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
    func clearFilters() {
        searchText = ""
        selectedStatus = nil
        selectedCategory = "–í—Å–µ"
    }
}
