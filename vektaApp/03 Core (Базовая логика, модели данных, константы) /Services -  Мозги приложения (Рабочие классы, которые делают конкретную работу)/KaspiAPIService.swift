//
//  KaspiAPIService.swift
//  vektaApp
//
//  –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Kaspi API –Ω–∞ –æ—Å–Ω–æ–≤–µ Python –ø—Ä–æ–µ–∫—Ç–∞ dumping
//

import Foundation
import FirebaseAuth
import FirebaseFirestore
import Combine

// MARK: - Kaspi API Models (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ)

/// –û—Ç–≤–µ—Ç –æ—Ç API —Å —Ç–æ–≤–∞—Ä–∞–º–∏
struct KaspiProductResponse: Codable {
    let content: [KaspiProduct]
    let totalElements: Int
    let totalPages: Int
    let size: Int
    let number: Int
}

/// –ú–æ–¥–µ–ª—å —Ç–æ–≤–∞—Ä–∞ –∏–∑ Kaspi API (—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–º—É API)
struct KaspiProduct: Codable {
    let productId: String
    let name: String
    let sku: String?
    let price: Double
    let isActive: Bool
    let category: String?
    let imageUrl: String?
    let position: Int?
    
    enum CodingKeys: String, CodingKey {
        case productId = "id"
        case name
        case sku
        case price
        case isActive
        case category
        case imageUrl
        case position
    }
}

/// –û—Ç–≤–µ—Ç –ø–æ–∑–∏—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞
struct ProductPositionResponse: Codable {
    let position: Int
    let totalProducts: Int?
}

/// –ó–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã (–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤)
struct PriceUpdateRequest: Codable {
    let productId: String
    let price: Int
}

// MARK: - KaspiAPIService (–ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π)

@MainActor
class KaspiAPIService: ObservableObject {
    
    // MARK: - Published Properties
    
    @Published var isLoading = false
    @Published var errorMessage: String?
    @Published var lastSyncDate: Date?
    @Published var syncProgress: Double = 0.0
    @Published var isAutoDumpingEnabled = false
    
    // MARK: - Private Properties
    
    private let db = Firestore.firestore()
    private var authListener: AuthStateDidChangeListenerHandle?
    private var autoDumpTimer: Timer?
    
    // –ë–∞–∑–æ–≤—ã–π URL (–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞)
    private let baseURL = "https://kaspi.kz/shop/api/v2"
    
    // X-TOKEN –∏–∑ cookies (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–æ–¥–∞–≤—Ü–æ–º)
    @Published var kaspiToken: String? {
        didSet {
            if kaspiToken != nil {
                saveTokenToFirestore()
            }
        }
    }
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ (—Ç–æ—á–Ω–æ –∫–∞–∫ –≤ Python –ø—Ä–æ–µ–∫—Ç–µ)
    private var headers: [String: String] {
        var headers = [
            "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36",
            "Content-Type": "application/json",
            "Accept": "application/json"
        ]
        
        if let token = kaspiToken {
            headers["X-TOKEN"] = token
        }
        
        return headers
    }
    
    // MARK: - Initialization
    
    init() {
        print("üîß KaspiAPIService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ Python –ø—Ä–æ–µ–∫—Ç–∞)")
        setupAuthListener()
    }
    
    deinit {
        if let listener = authListener {
            Auth.auth().removeStateDidChangeListener(listener)
        }
        autoDumpTimer?.invalidate()
    }
    
    // MARK: - Authentication
    
    private func setupAuthListener() {
        authListener = Auth.auth().addStateDidChangeListener { [weak self] _, user in
            Task { @MainActor in
                if user != nil {
                    await self?.loadKaspiToken()
                } else {
                    self?.kaspiToken = nil
                }
            }
        }
    }
    
    /// –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ Firestore
    func loadKaspiToken() async {
        guard let userId = Auth.auth().currentUser?.uid else {
            print("‚ùå –ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        }
        
        do {
            let document = try await db.collection("sellers").document(userId).getDocument()
            
            if let data = document.data(),
               let token = data["kaspiToken"] as? String { // –ò–∑–º–µ–Ω–µ–Ω–æ —Å kaspiApiToken –Ω–∞ kaspiToken
                kaspiToken = token
                errorMessage = nil
                print("‚úÖ Kaspi —Ç–æ–∫–µ–Ω (X-TOKEN) –∑–∞–≥—Ä—É–∂–µ–Ω")
            } else {
                print("‚ö†Ô∏è Kaspi —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
                kaspiToken = nil
            }
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞: \(error.localizedDescription)")
            errorMessage = "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞"
        }
    }
    
    /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ Firestore
    private func saveTokenToFirestore() {
        guard let userId = Auth.auth().currentUser?.uid,
              let token = kaspiToken else { return }
        
        Task {
            do {
                try await db.collection("sellers").document(userId).setData([
                    "kaspiToken": token,
                    "tokenUpdatedAt": FieldValue.serverTimestamp()
                ], merge: true)
                print("‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Firestore")
            } catch {
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: \(error)")
            }
        }
    }
    
    // MARK: - API Methods (—Ç–æ—á–Ω–æ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É)
    
    /// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –ø—Ä–æ–¥–∞–≤—Ü–∞ (GET /api/v2/products)
    func fetchAllProducts(page: Int = 0, size: Int = 50) async throws -> [KaspiProduct] {
        guard let token = kaspiToken else {
            throw KaspiAPIError.tokenNotFound
        }
        
        let urlString = "\(baseURL)/products?page=\(page)&size=\(size)"
        guard let url = URL(string: urlString) else {
            throw NetworkError.invalidURL
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.allHTTPHeaderFields = headers
        
        do {
            let (data, response) = try await URLSession.shared.data(for: request)
            
            guard let httpResponse = response as? HTTPURLResponse else {
                throw NetworkError.invalidResponse
            }
            
            guard httpResponse.statusCode == 200 else {
                throw NetworkError.serverError(httpResponse.statusCode, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤")
            }
            
            let decoded = try JSONDecoder().decode(KaspiProductResponse.self, from: data)
            print("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ \(decoded.content.count) —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Kaspi API")
            return decoded.content
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: \(error)")
            throw error
        }
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é —Ç–æ–≤–∞—Ä–∞ –≤ –ø–æ–∏—Å–∫–µ (GET /api/v2/prices/product-position/{product-id})
    func fetchProductPosition(productId: String) async throws -> Int {
        guard let token = kaspiToken else {
            throw KaspiAPIError.tokenNotFound
        }
        
        let urlString = "\(baseURL)/prices/product-position/\(productId)"
        guard let url = URL(string: urlString) else {
            throw NetworkError.invalidURL
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.allHTTPHeaderFields = headers
        
        do {
            let (data, response) = try await URLSession.shared.data(for: request)
            
            guard let httpResponse = response as? HTTPURLResponse else {
                throw NetworkError.invalidResponse
            }
            
            guard httpResponse.statusCode == 200 else {
                throw NetworkError.serverError(httpResponse.statusCode, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏")
            }
            
            let decoded = try JSONDecoder().decode(ProductPositionResponse.self, from: data)
            print("üìç –¢–æ–≤–∞—Ä \(productId) –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏: \(decoded.position)")
            return decoded.position
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏: \(error)")
            throw error
        }
    }
    
    /// –û–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (PATCH /api/v2/prices/change)
    func updatePrice(productId: String, newPrice: Double) async throws {
        guard let token = kaspiToken else {
            throw KaspiAPIError.tokenNotFound
        }
        
        let urlString = "\(baseURL)/prices/change"
        guard let url = URL(string: urlString) else {
            throw NetworkError.invalidURL
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "PATCH"
        request.allHTTPHeaderFields = headers
        
        // –§–æ—Ä–º–∞—Ç –∫–∞–∫ –≤ Python: –º–∞—Å—Å–∏–≤ —Å –æ–¥–Ω–∏–º –æ–±—ä–µ–∫—Ç–æ–º
        let payload = [
            PriceUpdateRequest(productId: productId, price: Int(newPrice))
        ]
        
        request.httpBody = try JSONEncoder().encode(payload)
        
        do {
            let (_, response) = try await URLSession.shared.data(for: request)
            
            guard let httpResponse = response as? HTTPURLResponse else {
                throw NetworkError.invalidResponse
            }
            
            guard httpResponse.statusCode == 200 || httpResponse.statusCode == 204 else {
                throw NetworkError.serverError(httpResponse.statusCode, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã")
            }
            
            print("‚úÖ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ \(productId) –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ \(newPrice) ‚Ç∏")
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
            await savePriceHistory(productId: productId, newPrice: newPrice)
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã: \(error)")
            throw error
        }
    }
    
    // MARK: - –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤
    
    /// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã —Å Firebase
    func syncAllProducts() async throws -> [Product] {
        isLoading = true
        errorMessage = nil
        syncProgress = 0.0
        
        do {
            // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ Kaspi –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ
            var allKaspiProducts: [KaspiProduct] = []
            var page = 0
            var hasMore = true
            
            while hasMore {
                let products = try await fetchAllProducts(page: page, size: 50)
                allKaspiProducts.append(contentsOf: products)
                
                syncProgress = Double(allKaspiProducts.count) / 200.0 // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
                
                if products.count < 50 {
                    hasMore = false
                } else {
                    page += 1
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                try await Task.sleep(nanoseconds: 200_000_000) // 0.2 —Å–µ–∫—É–Ω–¥—ã
            }
            
            // 2. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç Product
            let products = allKaspiProducts.map { kaspiProduct in
                convertKaspiProductToProduct(kaspiProduct)
            }
            
            // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore
            try await saveProductsToFirestore(products)
            
            isLoading = false
            lastSyncDate = Date()
            syncProgress = 1.0
            
            print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ \(products.count) —Ç–æ–≤–∞—Ä–æ–≤")
            return products
            
        } catch {
            isLoading = false
            syncProgress = 0.0
            errorMessage = error.localizedDescription
            throw error
        }
    }
    
    /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ KaspiProduct –≤ Product
    private func convertKaspiProductToProduct(_ kaspiProduct: KaspiProduct) -> Product {
        return Product(
            id: kaspiProduct.productId,
            kaspiProductId: kaspiProduct.productId,
            name: kaspiProduct.name,
            description: kaspiProduct.category ?? "",
            price: kaspiProduct.price,
            category: kaspiProduct.category ?? "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            imageURL: kaspiProduct.imageUrl ?? "",
            status: kaspiProduct.isActive ? .inStock : .inactive,
            warehouseStock: [:], // –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ
            createdAt: Date(),
            updatedAt: Date(),
            isActive: kaspiProduct.isActive
        )
    }
    
    /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ Firestore
    private func saveProductsToFirestore(_ products: [Product]) async throws {
        guard let userId = Auth.auth().currentUser?.uid else {
            throw KaspiAPIError.authenticationFailed
        }
        
        let batch = db.batch()
        let productsRef = db.collection("sellers").document(userId).collection("products")
        
        for product in products {
            let docRef = productsRef.document(product.id)
            batch.setData(product.toDictionary(), forDocument: docRef, merge: true)
        }
        
        try await batch.commit()
    }
    
    // MARK: - –ê–≤—Ç–æ–¥–µ–º–ø–∏–Ω–≥ (Price Optimizer)
    
    /// –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–¥–µ–º–ø–∏–Ω–≥
    func toggleAutoDumping() {
        isAutoDumpingEnabled.toggle()
        
        if isAutoDumpingEnabled {
            startAutoDumping()
        } else {
            stopAutoDumping()
        }
    }
    
    /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–¥–µ–º–ø–∏–Ω–≥
    private func startAutoDumping() {
        print("üöÄ –ê–≤—Ç–æ–¥–µ–º–ø–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        autoDumpTimer = Timer.scheduledTimer(withTimeInterval: 300, repeats: true) { _ in
            Task {
                await self.performAutoDump()
            }
        }
        
        // –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        Task {
            await performAutoDump()
        }
    }
    
    /// –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤—Ç–æ–¥–µ–º–ø–∏–Ω–≥
    private func stopAutoDumping() {
        print("‚èπ –ê–≤—Ç–æ–¥–µ–º–ø–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        autoDumpTimer?.invalidate()
        autoDumpTimer = nil
    }
    
    /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –∞–≤—Ç–æ–¥–µ–º–ø–∏–Ω–≥ –¥–ª—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ (–∫–∞–∫ –≤ Python –ø—Ä–æ–µ–∫—Ç–µ)
    private func performAutoDump() async {
        guard let userId = Auth.auth().currentUser?.uid else { return }
        
        print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–¥–µ–º–ø–∏–Ω–≥...")
        
        do {
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ Firestore
            let snapshot = try await db.collection("sellers").document(userId)
                .collection("products")
                .whereField("isActive", isEqualTo: true)
                .getDocuments()
            
            let products = snapshot.documents.compactMap { doc in
                Product.fromFirestore(doc.data(), id: doc.documentID)
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (–∫–∞–∫ –≤ Python)
            for product in products where product.isActive {
                await checkAndUpdatePrice(for: product)
                
                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏
                try await Task.sleep(nanoseconds: 500_000_000) // 0.5 —Å–µ–∫—É–Ω–¥—ã
            }
            
            print("‚úÖ –ê–≤—Ç–æ–¥–µ–º–ø–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–¥–µ–º–ø–∏–Ω–≥–∞: \(error)")
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (–ª–æ–≥–∏–∫–∞ –∏–∑ Python)
    private func checkAndUpdatePrice(for product: Product) async {
        do {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
            let position = try await fetchProductPosition(productId: product.kaspiProductId)
            
            // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è > 1, —Å–Ω–∏–∂–∞–µ–º —Ü–µ–Ω—É –Ω–∞ 2% (–∫–∞–∫ –≤ Python)
            if position > 1 {
                let newPrice = floor(product.price * 0.98)
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É (–Ω–µ –Ω–∏–∂–µ 70% –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª–∞)
                let minPrice = product.price * 0.7
                if newPrice >= minPrice {
                    try await updatePrice(productId: product.kaspiProductId, newPrice: newPrice)
                    print("üìâ \(product.name): –ø–æ–∑–∏—Ü–∏—è \(position) ‚Üí —Ü–µ–Ω–∞ —Å–Ω–∏–∂–µ–Ω–∞ –¥–æ \(newPrice) ‚Ç∏")
                } else {
                    print("‚ö†Ô∏è \(product.name): –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞")
                }
            } else {
                print("‚úÖ \(product.name): –ø–æ–∑–∏—Ü–∏—è \(position) - –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è")
            }
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ \(product.name): \(error)")
        }
    }
    
    /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
    private func savePriceHistory(productId: String, newPrice: Double) async {
        guard let userId = Auth.auth().currentUser?.uid else { return }
        
        do {
            let history = [
                "productId": productId,
                "newPrice": newPrice,
                "timestamp": FieldValue.serverTimestamp(),
                "reason": "auto_dump",
                "userId": userId
            ]
            
            try await db.collection("sellers").document(userId)
                .collection("priceHistory")
                .addDocument(data: history)
                
        } catch {
            print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ü–µ–Ω—ã: \(error)")
        }
    }
    
    // MARK: - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ API
    func checkAPIHealth() async -> Bool {
        do {
            _ = try await fetchAllProducts(page: 0, size: 1)
            return true
        } catch {
            print("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: \(error)")
            return false
        }
    }
    
    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API
    var apiStatistics: (requests: Int, lastSync: Date?) {
        // TODO: Implement request counting
        return (0, lastSyncDate)
    }
    
    /// –û—á–∏—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
    func clearMessages() {
        errorMessage = nil
    }
}

// MARK: - –û—à–∏–±–∫–∏ Kaspi API

enum KaspiAPIError: LocalizedError {
    case tokenNotFound
    case invalidToken
    case authenticationFailed
    case syncFailed(String)
    case priceUpdateFailed(String)
    
    var errorDescription: String? {
        switch self {
        case .tokenNotFound:
            return "X-TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω –∏–∑ cookies Kaspi Seller Cabinet."
        case .invalidToken:
            return "–ù–µ–≤–µ—Ä–Ω—ã–π X-TOKEN. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
        case .authenticationFailed:
            return "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Firebase"
        case .syncFailed(let message):
            return "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: \(message)"
        case .priceUpdateFailed(let message):
            return "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã: \(message)"
        }
    }
}
